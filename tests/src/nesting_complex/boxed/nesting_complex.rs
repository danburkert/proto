// This file is @generated by prost-build.
/// ----- Directly nested
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Foo {
    #[prost(message, optional, boxed, tag = "1")]
    pub bar: ::core::option::Option<::prost::alloc::boxed::Box<Bar>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bar {
    #[prost(message, optional, tag = "1")]
    pub foo: ::core::option::Option<Foo>,
}
/// ----- Transitively nested
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BazA {
    #[prost(message, optional, tag = "1")]
    pub baz_b: ::core::option::Option<BazB>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BazB {
    #[prost(message, optional, boxed, tag = "1")]
    pub baz_c: ::core::option::Option<::prost::alloc::boxed::Box<BazC>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BazC {
    #[prost(message, optional, tag = "1")]
    pub baz_a: ::core::option::Option<BazA>,
}
/// ----- Transitively nested in two chain
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BakA {
    #[prost(message, optional, boxed, tag = "1")]
    pub bak_b: ::core::option::Option<::prost::alloc::boxed::Box<BakB>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BakB {
    #[prost(message, optional, tag = "1")]
    pub bak_c: ::core::option::Option<BakC>,
    #[prost(message, optional, boxed, tag = "2")]
    pub bak_e: ::core::option::Option<::prost::alloc::boxed::Box<BakE>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BakC {
    #[prost(message, optional, boxed, tag = "1")]
    pub bak_d: ::core::option::Option<::prost::alloc::boxed::Box<BakD>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BakD {
    #[prost(message, optional, tag = "1")]
    pub bak_a: ::core::option::Option<BakA>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BakE {
    #[prost(message, optional, boxed, tag = "1")]
    pub bak_a: ::core::option::Option<::prost::alloc::boxed::Box<BakA>>,
}
